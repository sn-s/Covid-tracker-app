{"version":3,"sources":["components/CountryItem.tsx","components/BarChart.tsx","components/CountryList.tsx","components/GlobalInfo.tsx","App.tsx","index.tsx"],"names":["ListItem","styled","li","ListContent","div","props","isActive","CountryItem","country","activeCountries","onItemClick","initialState","includes","useState","setIsActive","Flag","Flags","CountryCode","onClick","handleOnClick","className","Country","Intl","NumberFormat","format","NewConfirmed","NewDeaths","TotalConfirmed","TotalDeaths","ID","ChartWrapper","BarChart","countries","sort","data","labels","forEach","push","datasets","label","backgroundColor","borderColor","borderWidth","generateChartData","options","plugins","legend","font","size","usePointStyle","pointStyle","SelectWrapper","ListWrapper","CountryList","sortCountries","setSortCountries","slice","setActiveCountries","setSort","onCountryClick","isCountryActive","prevState","filter","activeCountry","htmlFor","name","id","value","onChange","event","target","a","b","length","map","Wrapper","CasesBox","GlobalInfo","globalData","App","undefined","covidData","setCovidData","fetchData","fetch","result","json","useEffect","Global","Date","split","Countries","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7d2e6ceb.chunk.js","sourcesContent":["// Components\r\nimport Flags from \"country-flag-icons/react/3x2\";\r\n// Types\r\nimport { Country } from \"../types/Types\";\r\n// Styles\r\nimport styled from \"@emotion/styled\";\r\nimport { useState } from \"react\";\r\n\r\ninterface Props {\r\n  country: Country;\r\n  activeCountries: Country[];\r\n  onItemClick: (country: Country) => void;\r\n}\r\n\r\ninterface ListContentProps {\r\n  isActive: boolean;\r\n}\r\n\r\nconst ListItem = styled.li`\r\n  list-style-type: none;\r\n  flex: 0 0 30%;\r\n  text-align: center;\r\n  cursor: pointer;\r\n\r\n  @media (min-width: 420px) {\r\n    flex: 0 0 20%;\r\n  }\r\n`;\r\n\r\nconst ListContent = styled.div<ListContentProps>`\r\n  border-radius: 10px;\r\n  background-color: ${(props) =>\r\n    props.isActive ? \"rgb(255,165,0, 0.5)\" : \"#e7e7e7\"};\r\n  margin: 5px;\r\n  padding: 10px 0;\r\n\r\n  .isActive {\r\n    background-color: \"rgb(255,165,0, 0.5)\";\r\n  }\r\n\r\n  .card-header {\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: center;\r\n  }\r\n\r\n  .title-style {\r\n    padding: 5px;\r\n    font-weight: bold;\r\n  }\r\n\r\n  .flag-style {\r\n    width: 35px;\r\n  }\r\n\r\n  ul {\r\n    list-style: none;\r\n    margin: 0;\r\n    padding: 5px;\r\n  }\r\n\r\n  li span {\r\n    font-weight: bold;\r\n  }\r\n`;\r\n\r\nconst CountryItem: React.FC<Props> = ({\r\n  country,\r\n  activeCountries,\r\n  onItemClick,\r\n}) => {\r\n  const initialState = activeCountries.includes(country) ? true : false;\r\n  const [isActive, setIsActive] = useState<boolean>(initialState);\r\n\r\n  const handleOnClick = (country: Country) => {\r\n    onItemClick(country);\r\n    setIsActive(!isActive);\r\n  };\r\n\r\n  const Flag = Flags[country.CountryCode];\r\n\r\n  return (\r\n    <ListItem key={country.ID} onClick={() => handleOnClick(country)}>\r\n      <ListContent isActive={isActive}>\r\n        <div className=\"card-header\">\r\n          <div className=\"flag-style\">\r\n            <Flag />\r\n          </div>\r\n          <div className=\"title-style\">{country.Country}</div>\r\n        </div>\r\n        <ul>\r\n          <li>\r\n            New Cases:{\" \"}\r\n            <span>{Intl.NumberFormat().format(country.NewConfirmed)}</span>\r\n          </li>\r\n          <li>\r\n            New Deaths:{\" \"}\r\n            <span>{Intl.NumberFormat().format(country.NewDeaths)}</span>\r\n          </li>\r\n          <li>\r\n            Total Cases:{\" \"}\r\n            <span>{Intl.NumberFormat().format(country.TotalConfirmed)}</span>\r\n          </li>\r\n          <li>\r\n            Total Deaths:{\" \"}\r\n            <span>{Intl.NumberFormat().format(country.TotalDeaths)}</span>\r\n          </li>\r\n        </ul>\r\n      </ListContent>\r\n    </ListItem>\r\n  );\r\n};\r\n\r\nexport default CountryItem;\r\n","// Components\r\nimport { Bar } from \"react-chartjs-2\";\r\n// Types\r\nimport { Country } from \"../types/Types\";\r\n// Styles\r\nimport styled from \"@emotion/styled\";\r\n\r\ninterface Props {\r\n  countries: Country[];\r\n  sort: string;\r\n}\r\n\r\nconst ChartWrapper = styled.div`\r\n  max-width: 800px;\r\n  margin: 0 auto;\r\n`;\r\n\r\nconst BarChart: React.FC<Props> = ({ countries, sort }) => {\r\n  const generateChartData = () => {\r\n    const data: number[] = [];\r\n    const labels: string[] = [];\r\n\r\n    countries.forEach((country) => {\r\n      labels.push(country.Country);\r\n      switch (sort) {\r\n        case \"New Cases\":\r\n          return data.push(country.NewConfirmed);\r\n        case \"New Deaths\":\r\n          return data.push(country.NewDeaths);\r\n        case \"Total Cases\":\r\n          return data.push(country.TotalConfirmed);\r\n        case \"Total Deaths\":\r\n          return data.push(country.TotalDeaths);\r\n        default:\r\n          return data.push(country.NewConfirmed);\r\n      }\r\n    });\r\n\r\n    return {\r\n      labels,\r\n      datasets: [\r\n        {\r\n          label: sort,\r\n          data: data,\r\n          backgroundColor: [\r\n            \"rgba(255, 99, 132, 0.2)\",\r\n            \"rgba(54, 162, 235, 0.2)\",\r\n            \"rgba(255, 206, 86, 0.2)\",\r\n            \"rgba(75, 192, 192, 0.2)\",\r\n            \"rgba(153, 102, 255, 0.2)\",\r\n            \"rgba(255, 159, 64, 0.2)\",\r\n          ],\r\n          borderColor: [\r\n            \"rgba(255, 99, 132, 1)\",\r\n            \"rgba(54, 162, 235, 1)\",\r\n            \"rgba(255, 206, 86, 1)\",\r\n            \"rgba(75, 192, 192, 1)\",\r\n            \"rgba(153, 102, 255, 1)\",\r\n            \"rgba(255, 159, 64, 1)\",\r\n          ],\r\n          borderWidth: 1,\r\n        },\r\n      ],\r\n    };\r\n  };\r\n\r\n  const options = {\r\n    plugins: {\r\n      legend: {\r\n        labels: {\r\n          font: { size: 20 },\r\n          usePointStyle: true,\r\n          pointStyle: \"dash\",\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  return (\r\n    <ChartWrapper>\r\n      <Bar data={generateChartData()} options={options} />\r\n    </ChartWrapper>\r\n  );\r\n};\r\n\r\nexport default BarChart;\r\n","import React, { useState } from \"react\";\r\n//Components\r\nimport CountryItem from \"./CountryItem\";\r\nimport BarChart from \"./BarChart\";\r\n// Types\r\nimport { Country } from \"../types/Types\";\r\n// Styles\r\nimport styled from \"@emotion/styled\";\r\n\r\ninterface Props {\r\n  countries: Country[];\r\n}\r\n\r\nconst SelectWrapper = styled.div`\r\n  text-align: end;\r\n  margin: 15px;\r\n  font-size: 20px;\r\n  font-weight: bold;\r\n\r\n  select {\r\n    font-size: 25px;\r\n  }\r\n`;\r\n\r\nconst ListWrapper = styled.div`\r\n  margin-top: 5px;\r\n  padding: 0;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n`;\r\n\r\nconst CountryList: React.FC<Props> = ({ countries }) => {\r\n  const [sortCountries, setSortCountries] = useState<Country[]>(countries);\r\n  const [activeCountries, setActiveCountries] = useState<Country[]>(\r\n    countries.slice(0, 5)\r\n  );\r\n  const [sort, setSort] = useState(\"New Cases\");\r\n\r\n  const handleSort = (event: React.ChangeEvent<HTMLSelectElement>) => {\r\n    setSort(event.target.value);\r\n    setSortCountries((prevState) => {\r\n      switch (event.target.value) {\r\n        case \"New Cases\":\r\n          return prevState.sort((a, b) => b.NewConfirmed - a.NewConfirmed);\r\n        case \"New Deaths\":\r\n          return prevState.sort((a, b) => b.NewDeaths - a.NewDeaths);\r\n        case \"Total Cases\":\r\n          return prevState.sort((a, b) => b.TotalConfirmed - a.TotalConfirmed);\r\n        case \"Total Deaths\":\r\n          return prevState.sort((a, b) => b.TotalDeaths - a.TotalDeaths);\r\n        default:\r\n          return prevState.sort((a, b) => b.NewConfirmed - a.NewConfirmed);\r\n      }\r\n    });\r\n  };\r\n\r\n  const onCountryClick = (country: Country) => {\r\n    // check if clicked country is already in the activeCountry array\r\n    const isCountryActive = activeCountries.includes(country);\r\n\r\n    if (isCountryActive) {\r\n      // if country exists, remove it from the array\r\n      setActiveCountries((prevState) =>\r\n        prevState.filter((activeCountry) => activeCountry !== country)\r\n      );\r\n    } else {\r\n      // if country doesn't exist, add it to the array\r\n      setActiveCountries((prevState) => [...prevState, country]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <SelectWrapper>\r\n        <label htmlFor=\"sort\">Sort by: </label>\r\n        <select name=\"sort\" id=\"sort\" value={sort} onChange={handleSort}>\r\n          <option value=\"New Cases\">New Cases</option>\r\n          <option value=\"New Deaths\">New Deaths</option>\r\n          <option value=\"Total Cases\">Total Cases</option>\r\n          <option value=\"Total Deaths\">Total Deaths</option>\r\n        </select>\r\n      </SelectWrapper>\r\n      {activeCountries.length > 0 && (\r\n        <BarChart countries={activeCountries} sort={sort} />\r\n      )}\r\n      <hr />\r\n      <ListWrapper>\r\n        {sortCountries.map((country) => (\r\n          <CountryItem\r\n            key={country.ID}\r\n            country={country}\r\n            activeCountries={activeCountries}\r\n            onItemClick={onCountryClick}\r\n          />\r\n        ))}\r\n      </ListWrapper>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CountryList;\r\n","// Types\r\nimport { Global } from \"../types/Types\";\r\n// Styles\r\nimport styled from \"@emotion/styled\";\r\n\r\ninterface Props {\r\n  globalData: Global;\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  background-color: #e7e7e7;\r\n  display: flex;\r\n  justify-content: space-around;\r\n  align-items: center;\r\n  text-align: center;\r\n`;\r\n\r\nconst CasesBox = styled.div`\r\n  flex-direction: row;\r\n`;\r\n\r\nconst GlobalInfo: React.FC<Props> = ({ globalData }) => {\r\n  return (\r\n    <Wrapper>\r\n      <CasesBox>\r\n        <h2>New Cases WorldWide</h2>\r\n        <h3>\r\n          New Confirmed:{\" \"}\r\n          {new Intl.NumberFormat().format(globalData.NewConfirmed)}\r\n        </h3>\r\n        <h3>\r\n          New Deaths: {new Intl.NumberFormat().format(globalData.NewDeaths)}\r\n        </h3>\r\n      </CasesBox>\r\n      <CasesBox>\r\n        <h2>Total Cases WorldWide</h2>\r\n        <h3>\r\n          Total Confirmed:{\" \"}\r\n          {new Intl.NumberFormat().format(globalData.TotalConfirmed)}\r\n        </h3>\r\n        <h3>\r\n          Total Deaths: {new Intl.NumberFormat().format(globalData.TotalDeaths)}\r\n        </h3>\r\n      </CasesBox>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default GlobalInfo;\r\n","import { useState, useEffect } from \"react\";\nimport CountryList from \"./components/CountryList\";\n// Components\nimport GlobalInfo from \"./components/GlobalInfo\";\n// Types\nimport { ResponseData } from \"./types/Types\";\n// Styles\nimport styled from \"@emotion/styled\";\n\nconst Wrapper = styled.div`\n  text-align: center;\n\n  .heading {\n    background-color: #e7e7e7;\n  }\n\n  h1 {\n    background-color: #e7e7e7;\n    margin: 0;\n    padding: 10px;\n  }\n\n  h4 {\n    background-color: #e7e7e7;\n    margin: 0;\n    padding-bottom: 10px;\n  }\n\n  hr {\n    margin: 0;\n    border-top: 1px solid black;\n  }\n`;\n\nconst App: React.FC = () => {\n  const [covidData, setCovidData] = useState<ResponseData | undefined>(\n    undefined\n  );\n\n  const fetchData = async () => {\n    const result = await fetch(\"https://api.covid19api.com/summary\");\n    const data: ResponseData = await result.json();\n    setCovidData(data);\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  return (\n    <Wrapper>\n      <div className=\"heading\">\n        <h1>Global Covid-19 Tracker</h1>\n        <h4>Last Updated: {covidData?.Global.Date.split(\"T\")[0]}</h4>\n      </div>\n      <hr />\n      {covidData ? (\n        <>\n          <GlobalInfo globalData={covidData?.Global} />\n          <CountryList\n            countries={covidData?.Countries.sort(\n              (a, b) => b.NewConfirmed - a.NewConfirmed\n            )}\n          />\n        </>\n      ) : (\n        \"Loadind data...\"\n      )}\n    </Wrapper>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}